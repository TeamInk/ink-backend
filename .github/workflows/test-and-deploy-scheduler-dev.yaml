name: Test and Deploy with Noti - Scheduler - Dev

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
  push:
    branches:
      - main
    paths:
      - 'ink-core/**'
      - 'ink-scheduler/**'
      - '.github/workflows/test-and-deploy-scheduler-dev.yaml'
      - 'deployment/docker-compose-scheduler-dev.yml'

env:
  JAR_NAME: ink-scheduler-0.0.1-SNAPSHOT.jar
  DEPLOYMENT_NAME: ink-scheduler-deployment # Add your deployment name here.
  IMAGE: ink-scheduler

jobs:
  deployment-scheduler:
    name: Gradle 테스트 후 배포
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle 빌드 캐싱
        id: gradle-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: application-dev.yml 디코딩
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'application-dev.yml'
          fileDir: './ink-scheduler/src/main/resources/'
          encodedString: ${{ secrets.APPLICATION_YML_DEV_BASE64 }}

      - name: liquibase 스키마 업데이트
        run: ./gradlew dbMigration update ${{ secrets.DB_MIGRATION_PARAMS_DEV }}

      - name: Gradle 테스트 및 실행파일 생성
        run: ./gradlew :ink-scheduler:build :ink-scheduler:test :ink-scheduler:bootJar -Dfile.encoding=UTF-8 -Duser.timezone=Asia/Seoul --info

      - name: SHA 업데이트
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/_meta

      - name: 이미지 태그 준비
        id: get-tag
        run: |
          tag=$(echo $GITHUB_SHA | head -c7)
          echo "::set-output name=tag::$tag"

      - name: 도커 캐싱 준비
        uses: docker/setup-buildx-action@v3

      - name: 도커 레이어 캐싱
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 도커 로그인
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: 컨테이너 이미지 빌드 및 이미지 푸쉬
        uses: docker/build-push-action@v5
        with:
          context: ./ink-scheduler/
          push: true
          tags: docker.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: 캐시 삭제
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: 환경변수 치환 후 최종 배포 파일 생성
        uses: danielr1996/envsubst-action@1.0.0
        env:
          VERSION: ${{ steps.get-tag.outputs.tag }}
          IMAGE: ink-scheduler
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
 #         CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
 #         CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
        with:
          input: deployment/docker-compose-scheduler-dev.yml
          output: docker-compose-scheduler-dev.yml

      - name: SSH키 설정
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 도커 네트워크 생성 (존재하지 않을 시)
        env:
          SHARED_NETWORK: ink_default
        run: |
          network_exists=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "docker network ls --filter name='^${SHARED_NETWORK}$' --format '{{.Name}}'")
          if [ -z "$network_exists" ]; then
            echo "Network '${SHARED_NETWORK}' does not exist, creating it..."
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "docker network create ${SHARED_NETWORK}"
          else
            echo "Network '${SHARED_NETWORK}' already exists, skipping creation."
          fi

      - name: 서버에 배포
        env:
          DOCKER_COMPOSE_FILE: docker-compose-scheduler-dev.yml
          SERVICE_NAME: ink_backend_scheduler
          PROJECT_NAME: ink-backend-scheduler
        run: |
          # Make a directory
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.PATH_TO_REMOTE }}"
          
          # Copy docker-compose.yml file to the remote server
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P ${{ secrets.SSH_PORT }} $DOCKER_COMPOSE_FILE ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ vars.PATH_TO_REMOTE }}/$DOCKER_COMPOSE_FILE
          
          # Docker network 
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.PATH_TO_REMOTE }}"

          # SSH to the remote server and deploy the Docker container using Docker Compose
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ vars.PATH_TO_REMOTE }} && docker-compose -f $DOCKER_COMPOSE_FILE --project-name $PROJECT_NAME up -d --force-recreate"

      - name: 실패시 디스코드에 알림
        uses: sarisia/actions-status-discord@v1.13.0
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

