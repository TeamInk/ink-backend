name: Traefik Deploy

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
  push:
    branches:
      - main
    paths:
      - '.github/workflows/deploy-traefik-config.yaml'
      - 'deployment/traefik.yml'

jobs:
  deployment-traefik:
    name: Traefik 배포
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: SSH키 설정
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 도커 네트워크 생성 (존재하지 않을 시)
        env:
          SHARED_NETWORK: ink_default
        run: |
          network_exists=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "docker network ls --filter name='^${SHARED_NETWORK}$' --format '{{.Name}}'")
          if [ -z "$network_exists" ]; then
            echo "Network '${SHARED_NETWORK}' does not exist, creating it..."
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "docker network create ${SHARED_NETWORK}"
          else
            echo "Network '${SHARED_NETWORK}' already exists, skipping creation."
          fi

      - name: 서버에 배포
        env:
          DOCKER_COMPOSE_FILE: traefik.yml
          CONFIG_FILE: traefik-config.yaml
          SERVICE_NAME: traefik
          PROJECT_NAME: traefik
        run: |
          # Move ymls file to the deployment directory
          mv deployment/$DOCKER_COMPOSE_FILE .
          mv deployment/$CONFIG_FILE .
          
          # Make a directory
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.PATH_TO_REMOTE }}"
          
          # Copy docker-compose.yml file to the remote server
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P ${{ secrets.SSH_PORT }} $DOCKER_COMPOSE_FILE ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ vars.PATH_TO_REMOTE }}/$DOCKER_COMPOSE_FILE
          
          # Copy traefik.yaml file to the remote server
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P ${{ secrets.SSH_PORT }} $CONFIG_FILE ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ vars.PATH_TO_REMOTE }}/$CONFIG_FILE

          # SSH to the remote server and deploy the Docker container using Docker Compose
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "cd ${{ vars.PATH_TO_REMOTE }} && docker-compose -f $DOCKER_COMPOSE_FILE --project-name $PROJECT_NAME up -d --force-recreate"

      - name: 실패시 디스코드에 알림
        uses: sarisia/actions-status-discord@v1.13.0
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

