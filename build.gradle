plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'org.liquibase.gradle' version '2.0.4'
}

bootJar {
	enabled = false
}
jar {
	enabled = true
}

repositories {
	mavenCentral()
}

allprojects {
	group 'net.ink'
	version '0.0.1-SNAPSHOT'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	sourceCompatibility = '11'

	repositories {
		mavenCentral()
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		compileOnly 'org.projectlombok:lombok'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'com.h2database:h2'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.dbunit:dbunit:2.6.0'
		testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
		implementation 'mysql:mysql-connector-java'
		implementation 'org.mapstruct:mapstruct:1.4.2.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
		implementation 'org.liquibase:liquibase-core:4.3.5'
		implementation 'com.google.firebase:firebase-admin:6.8.1'
		implementation 'ca.pjer:logback-awslogs-appender:1.4.0'
	}

	jacocoTestReport {
		reports {
			html.destination file("${buildDir}/jacocoHtml")
			csv.enabled false
			xml.enabled true
		}

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						"**/*Ink*Application*",
						"**/*BatchStarter*",
						"**/listener/*",
						"**/trigger/*",
						"**/job/*",
						"**/scheduler/*",
						"**/config/*",
						"**/exception/*",
						"**/dto/*",
						"**/vo/*",
						"**/advice/*",
						"**/util/*",
						"**/core/core/**/*",
						"**/api/web/*",
				])
			}))
		}

		finalizedBy 'jacocoTestCoverageVerification'
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = true
				element = 'CLASS'

				limit {
					counter = 'LINE'
					value = 'COVEREDRATIO'
					minimum = 0.00
				}

				excludes = [
						"**/*Ink*Application*",
						"**/*BatchStarter*",
						"**/listener/*",
						"**/trigger/*",
						"**/job/*",
						"**/scheduler/*",
						"**/config/*",
						"**/exception/*",
						"**/dto/*",
						"**/vo/*",
						"**/advice/*",
						"**/util/*",
						"**/core/core/**/*",
						"**/api/core/web/*",
				]
			}

		}
	}
}

dependencies {
	liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
	liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
	liquibaseRuntime 'mysql:mysql-connector-java:8.0.22'
	liquibaseRuntime 'com.h2database:h2'
	liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
}

task dbMigration {
	def props = project.getProperties()

	liquibase {
		activities {
			main {
				changeLogFile "ink-core/src/main/resources/config/liquibase/master.xml"
				classpath "$projectDir/ink-core/src/main/resources/"
//					url "jdbc:h2:mem:testdb"
//					username "sa"
//					password ""
				url props.url
				username props.username
				password props.password
			}
		}
	}
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

task generateTestFiles {
	doLast {
		rootProject.subprojects.each { subproject ->
			def srcDir = subproject.file('src/main/java')
			def testDir = subproject.file('src/test/java')

			if (srcDir.exists()) {
				fileTree(dir: srcDir, includes: ['**/*.java']).each { file ->
					def fileName = file.name
					if (fileName.endsWith('Controller.java') || fileName.endsWith('Service.java') || fileName.endsWith('ServiceImpl.java') || fileName.endsWith('Repository.java')) {
						def relativePath = srcDir.toURI().relativize(file.toURI()).getPath()
						def packageDir = relativePath.substring(0, relativePath.lastIndexOf('/')).replace('/', '.').replace('\\', '.')
						def testFile = new File(testDir, relativePath.replace('.java', 'Test.java'))

						if (!testFile.exists()) {
							testFile.parentFile.mkdirs()
							testFile.text = """\
                                package ${packageDir};

                                import org.junit.jupiter.api.Test;

                                class ${file.name.replace('.java', 'Test')} {

                                    @Test
                                    void test() {
                                        // TODO: Implement tests
                                    }
                                }
                            """.stripIndent()
							println "Generated test file: ${testFile.path}"
						} else {
							println "Test file already exists: ${testFile.path}"
						}
					} else {
						println "Skipped generating test file for: ${file.path}"
					}
				}
			}
		}
	}
}